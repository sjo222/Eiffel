(declare-const p Bool)
(declare-const r1 Real)
(declare-sort G)
(declare-fun P (G) Bool) 
(declare-fun Q () Bool) 
(declare-fun B-val (Int) Real)
(assert (forall ((i Int)) (= (B-val i) 
	(ite (= i 0) 1.7
	(ite (= i 1) 1.4
	(ite (= i 2) 22
		 -3))))))
(declare-const A (Array Int Real))
(define-fun B () (Array Int Real) (_ as-array B-val))
(define-const c1 Bool (and p (not p)))
(define-const c2 Bool (or p (not p)))
; (define-const 
(define-const c11 Bool (and (= r1 2)
						(< 2 r1)
						(< r1 3)))
(define-const c12 Bool (= (forall ((x G)) (=> (P x) Q))
						  (=> (exists ((x G)) (P x)) Q)))
(define-const c13 Bool (forall ((i Int) (j Int))
							   (=> (<= i j)
							       (<= (select A i) (select A j)))))
; A = [1.7, 1.4, 22]
(define-const c14 Bool (forall ((i Int)) 
							   (=> (and (<= 0 i) (< i 3))
							   	   (<= 1.4 (select B i)))))
(push)
(echo "> conjecture 1")
(assert (not c1))
(check-sat)
(get-model)
(pop)
(push)
(echo "> conjecture 2")
(assert (not c2))
(check-sat)
(get-model)
(pop)
(push)
(echo "> conjecture 11")
(assert (not c11))
(check-sat)
(get-model)
(pop)
(push)
(echo "> conjecture 12")
(assert (not c12))
(check-sat)
(get-model)
(pop)
(push)
(echo "> conjecture 13")
(assert (not c13))
(check-sat)
(get-model)
(pop)
(push)
(echo "> conjecture 14")
(assert (not c14))
(check-sat)
(get-model)
(pop)
